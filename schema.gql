# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AgreementDto {
  id: ID!
  numAgreement: String!
  user: UserDto!
  dateAgreement: DateTime!
}

input CreateUserInput {
  firstName: String
  middleName: String
  secondName: String
  username: String!
  passwordHash: String!
  email: String
  phone: String
  rem: String
  roleId: String!
}

input CreateUserRoleInput {
  id: String!
  roleDescription: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteUserInput {
  id: Int!
}

input DeleteUserRoleInput {
  id: String!
}

type Mutation {
  createUser(data: CreateUserInput!): UserDto!
  updateUser(data: UpdateUserInput!): UserDto!
  deleteUser(data: DeleteUserInput!): Float!
  createUserRole(data: CreateUserRoleInput!): UserRoleDto!
  updateUserRole(data: UpdateUserRoleInput!): UserRoleDto!
  deleteUserRole(data: DeleteUserRoleInput!): UserRoleDto!
}

type Query {
  agreementsFiltered(numAgreements: [String!]): [AgreementDto!]!
  user(id: Int!): UserDto

  """Поиск пользователей и пагинация"""
  userList(textFilter: String, paging: Int!, page: Int!): [UserDto!]!
  usersFiltered(ids: [Int!], usernames: [String!]): [UserDto!]!

  """Роль пользователя"""
  userRole(id: String!): UserRoleDto!
  userRolesFiltered(ids: [String!]): [UserRoleDto!]!
}

input UpdateUserInput {
  id: Int!
  firstName: String
  middleName: String
  secondName: String
  username: String!
  passwordHash: String!
  email: String
  phone: String
  rem: String
  roleId: String!
}

input UpdateUserRoleInput {
  id: String!
  roleDescription: String
}

type UserDto {
  id: ID
  firstName: String
  middleName: String
  secondName: String
  displayName: String
  username: String
  email: String
  phone: String
  rem: String
  role: UserRoleDto
}

type UserRoleDto {
  id: String
  roleDescription: String
}
